// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ExamContext))]
    partial class ExamContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ContentBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AudioFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint");

                    b.Property<byte>("QuestionAmount")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("QuestionLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuestionStruct")
                        .HasColumnType("int");

                    b.Property<string>("TextContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnConFirmedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("AudioFileId")
                        .IsUnique()
                        .HasFilter("[AudioFileId] IS NOT NULL");

                    b.HasIndex("ImageFileId")
                        .IsUnique()
                        .HasFilter("[ImageFileId] IS NOT NULL");

                    b.HasIndex("QuestionLevelId");

                    b.ToTable("ContentBlock", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DetailResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("UserId", "ExamId");

                    b.ToTable("DetailResult", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("District", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedQuestionUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExamStructId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Fee")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedQuestionUserId");

                    b.HasIndex("ExamStructId")
                        .IsUnique();

                    b.HasIndex("ManagerId");

                    b.ToTable("Exam", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ExamFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExamFile", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ExamQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContentBlockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContentBlockId")
                        .IsUnique();

                    b.HasIndex("ExamId")
                        .IsUnique();

                    b.ToTable("ExamQuestion", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ExamStruct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("QuestionLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionLevelId");

                    b.ToTable("ExamStruct", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Examinee", b =>
                {
                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Room")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.HasKey("ExamId", "UserId");

                    b.ToTable("Examinee", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Province", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ContentBlockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContentBlockId");

                    b.HasIndex("ImageFileId")
                        .IsUnique()
                        .HasFilter("[ImageFileId] IS NOT NULL");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.QuestionBank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("QuestionCreateDue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("QuestionReviewDue")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("QuestionBank", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.QuestionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("QuestionType", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2959ca56-a667-46a0-acea-eba1e9961419"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("85af4517-be3b-4ea9-b2cd-1ad9b4417870"),
                            Name = "ExamManager"
                        },
                        new
                        {
                            Id = new Guid("45b76d26-26e2-41d1-a0f7-ed6b55dc2190"),
                            Name = "TestCreator"
                        },
                        new
                        {
                            Id = new Guid("316f8c9c-a9a2-4b17-b4c4-6434d165bc62"),
                            Name = "QuestionBankManager"
                        },
                        new
                        {
                            Id = new Guid("93d09639-a7b9-4825-b364-30366908b007"),
                            Name = "QuestionContributor"
                        },
                        new
                        {
                            Id = new Guid("61af889a-7617-43e7-9cb2-537a01e97a34"),
                            Name = "QuestionReviewer"
                        },
                        new
                        {
                            Id = new Guid("a0e4f1d5-3c8b-4f2a-8e6c-7d9b5e0a2f1d"),
                            Name = "Examinee"
                        },
                        new
                        {
                            Id = new Guid("8a7dd16f-85bf-4143-be0b-a31da3bbe44a"),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SimilarQuestion", b =>
                {
                    b.Property<Guid>("ContentBlockId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContentBlockId2")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.HasKey("ContentBlockId1", "ContentBlockId2");

                    b.HasIndex("ContentBlockId2");

                    b.ToTable("SimilarQuestion", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AudioFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsProcess")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionBankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReviewedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AudioFileId")
                        .IsUnique()
                        .HasFilter("[AudioFileId] IS NOT NULL");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("QuestionBankId");

                    b.HasIndex("ReviewedUserId");

                    b.ToTable("Skill", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateOfIssue")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("IdCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImageFaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ImageIdCardAfterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ImageIdCardBeforeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfIssue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Strict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageFaceId")
                        .IsUnique()
                        .HasFilter("[ImageFaceId] IS NOT NULL");

                    b.HasIndex("ImageIdCardAfterId")
                        .IsUnique()
                        .HasFilter("[ImageIdCardAfterId] IS NOT NULL");

                    b.HasIndex("ImageIdCardBeforeId")
                        .IsUnique()
                        .HasFilter("[ImageIdCardBeforeId] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.HasIndex("WardId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("faff3232-3fbc-4344-9415-de3d357bf79b"),
                            Email = "phuthanhban3@gmail.com",
                            FullName = "Nguyễn Xuân Phú",
                            IsActive = true,
                            Password = "1",
                            RoleId = new Guid("2959ca56-a667-46a0-acea-eba1e9961419")
                        },
                        new
                        {
                            Id = new Guid("42afbf60-5754-43ce-9895-0127d4ab9c7f"),
                            Email = "taocau@gmail.com",
                            FullName = "Tạo Câu Hỏi",
                            IsActive = true,
                            Password = "1",
                            RoleId = new Guid("93d09639-a7b9-4825-b364-30366908b007")
                        },
                        new
                        {
                            Id = new Guid("cf5c0639-c6cc-481a-ba0d-8073ddd1ed44"),
                            Email = "review@gmail.com",
                            FullName = "Đánh Giá Câu",
                            IsActive = true,
                            Password = "1",
                            RoleId = new Guid("61af889a-7617-43e7-9cb2-537a01e97a34")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Ward", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Answer", b =>
                {
                    b.HasOne("Domain.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entities.ContentBlock", b =>
                {
                    b.HasOne("Domain.Entities.ExamFile", "AudioFile")
                        .WithOne("AudioContentBlock")
                        .HasForeignKey("Domain.Entities.ContentBlock", "AudioFileId");

                    b.HasOne("Domain.Entities.ExamFile", "ImageFile")
                        .WithOne("ImageContentBlock")
                        .HasForeignKey("Domain.Entities.ContentBlock", "ImageFileId");

                    b.HasOne("Domain.Entities.QuestionType", "QuestionLevel")
                        .WithMany("ContentBlocks")
                        .HasForeignKey("QuestionLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AudioFile");

                    b.Navigation("ImageFile");

                    b.Navigation("QuestionLevel");
                });

            modelBuilder.Entity("Domain.Entities.DetailResult", b =>
                {
                    b.HasOne("Domain.Entities.Answer", "Answer")
                        .WithMany("DetailResults")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Examinee", "Examinee")
                        .WithMany("DetailResults")
                        .HasForeignKey("UserId", "ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Examinee");
                });

            modelBuilder.Entity("Domain.Entities.District", b =>
                {
                    b.HasOne("Domain.Entities.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Domain.Entities.Exam", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedQuestionUser")
                        .WithMany("CreatedQuestionExam")
                        .HasForeignKey("CreatedQuestionUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ExamStruct", "ExamStruct")
                        .WithOne("Exam")
                        .HasForeignKey("Domain.Entities.Exam", "ExamStructId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Manager")
                        .WithMany("ManagedExam")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedQuestionUser");

                    b.Navigation("ExamStruct");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Domain.Entities.ExamQuestion", b =>
                {
                    b.HasOne("Domain.Entities.ContentBlock", "ContentBlock")
                        .WithOne("ExamQuestion")
                        .HasForeignKey("Domain.Entities.ExamQuestion", "ContentBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Exam", "Exam")
                        .WithOne("ExamQuestion")
                        .HasForeignKey("Domain.Entities.ExamQuestion", "ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentBlock");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Domain.Entities.ExamStruct", b =>
                {
                    b.HasOne("Domain.Entities.QuestionType", "QuestionLevel")
                        .WithMany("ExamStructs")
                        .HasForeignKey("QuestionLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionLevel");
                });

            modelBuilder.Entity("Domain.Entities.Examinee", b =>
                {
                    b.HasOne("Domain.Entities.Exam", null)
                        .WithMany("Examinees")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.HasOne("Domain.Entities.ContentBlock", "ContentBlock")
                        .WithMany("Questions")
                        .HasForeignKey("ContentBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ExamFile", "ImageFile")
                        .WithOne("Question")
                        .HasForeignKey("Domain.Entities.Question", "ImageFileId");

                    b.Navigation("ContentBlock");

                    b.Navigation("ImageFile");
                });

            modelBuilder.Entity("Domain.Entities.QuestionBank", b =>
                {
                    b.HasOne("Domain.Entities.User", "Manager")
                        .WithMany("QuestionBanks")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Domain.Entities.QuestionType", b =>
                {
                    b.HasOne("Domain.Entities.Skill", "Skill")
                        .WithMany("QuestionLevels")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Domain.Entities.SimilarQuestion", b =>
                {
                    b.HasOne("Domain.Entities.ContentBlock", "ContentBlock1")
                        .WithMany("SimilarQuestions1")
                        .HasForeignKey("ContentBlockId1")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ContentBlock", "ContentBlock2")
                        .WithMany("SimilarQuestions2")
                        .HasForeignKey("ContentBlockId2")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ContentBlock1");

                    b.Navigation("ContentBlock2");
                });

            modelBuilder.Entity("Domain.Entities.Skill", b =>
                {
                    b.HasOne("Domain.Entities.ExamFile", "AudioFile")
                        .WithOne("Skill")
                        .HasForeignKey("Domain.Entities.Skill", "AudioFileId");

                    b.HasOne("Domain.Entities.User", "CreatedUser")
                        .WithMany("CreatedQuestions")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.QuestionBank", "QuestionBank")
                        .WithMany("Skills")
                        .HasForeignKey("QuestionBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "ReviewedUser")
                        .WithMany("ReviewedQuestions")
                        .HasForeignKey("ReviewedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AudioFile");

                    b.Navigation("CreatedUser");

                    b.Navigation("QuestionBank");

                    b.Navigation("ReviewedUser");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.ExamFile", "ImageFace")
                        .WithOne("ImageFace")
                        .HasForeignKey("Domain.Entities.User", "ImageFaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.ExamFile", "ImageIdCardAfter")
                        .WithOne("ImageIdCardAfter")
                        .HasForeignKey("Domain.Entities.User", "ImageIdCardAfterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.ExamFile", "ImageIdCardBefore")
                        .WithOne("ImageIdCardBefore")
                        .HasForeignKey("Domain.Entities.User", "ImageIdCardBeforeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Ward", "Ward")
                        .WithMany("Users")
                        .HasForeignKey("WardId");

                    b.Navigation("ImageFace");

                    b.Navigation("ImageIdCardAfter");

                    b.Navigation("ImageIdCardBefore");

                    b.Navigation("Role");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Domain.Entities.Ward", b =>
                {
                    b.HasOne("Domain.Entities.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Domain.Entities.Answer", b =>
                {
                    b.Navigation("DetailResults");
                });

            modelBuilder.Entity("Domain.Entities.ContentBlock", b =>
                {
                    b.Navigation("ExamQuestion");

                    b.Navigation("Questions");

                    b.Navigation("SimilarQuestions1");

                    b.Navigation("SimilarQuestions2");
                });

            modelBuilder.Entity("Domain.Entities.District", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("Domain.Entities.Exam", b =>
                {
                    b.Navigation("ExamQuestion")
                        .IsRequired();

                    b.Navigation("Examinees");
                });

            modelBuilder.Entity("Domain.Entities.ExamFile", b =>
                {
                    b.Navigation("AudioContentBlock");

                    b.Navigation("ImageContentBlock");

                    b.Navigation("ImageFace")
                        .IsRequired();

                    b.Navigation("ImageIdCardAfter")
                        .IsRequired();

                    b.Navigation("ImageIdCardBefore")
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Domain.Entities.ExamStruct", b =>
                {
                    b.Navigation("Exam")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Examinee", b =>
                {
                    b.Navigation("DetailResults");
                });

            modelBuilder.Entity("Domain.Entities.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Domain.Entities.QuestionBank", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Domain.Entities.QuestionType", b =>
                {
                    b.Navigation("ContentBlocks");

                    b.Navigation("ExamStructs");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Skill", b =>
                {
                    b.Navigation("QuestionLevels");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("CreatedQuestionExam");

                    b.Navigation("CreatedQuestions");

                    b.Navigation("ManagedExam");

                    b.Navigation("QuestionBanks");

                    b.Navigation("ReviewedQuestions");
                });

            modelBuilder.Entity("Domain.Entities.Ward", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
